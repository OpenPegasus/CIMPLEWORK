// Generated by genprov 2.0.25
#include "LC_Test_Provider.h"

CIMPLE_NAMESPACE_BEGIN

LC_Test_Provider::LC_Test_Provider()
{
}

LC_Test_Provider::~LC_Test_Provider()
{
}

Load_Status LC_Test_Provider::load()
{
    return LOAD_OK;
}

Unload_Status LC_Test_Provider::unload()
{
    return UNLOAD_OK;
}

Get_Instance_Status LC_Test_Provider::get_instance(
    const LC_Test* model,
    LC_Test*& instance)
{
    Auto_Mutex am(resource.mutex);

    for (size_t i = 0; i < resource.lc_tests.size(); i++)
    {
        LC_Test* e = resource.elc_tests[i];

        if (key_eq(model, e))
        {
            instance = e->clone();
            return GET_INSTANCE_OK;
        }
    }

    return GET_INSTANCE_NOT_FOUND;
}

Enum_Instances_Status LC_Test_Provider::enum_instances(
    const LC_Test* model,
    Enum_Instances_Handler<LC_Test>* handler)
{
    Auto_Mutex am(resource.mutex);

    for (size_t i = 0; i < resource.lc_tests.size(); i++)
    {
        LC_Test* e = resource.lc_tests[i];
        handler->handle(e->clone());
    }

    return ENUM_INSTANCES_OK;
}

Create_Instance_Status LC_Test_Provider::create_instance(
    LC_Test* instance)
{
    for (size_t i = 0; i < resource.lc_tests.size(); i++)
    {
        LC_Test* e = resource.lc_tests[i];

        if (key_eq(instance, e))
            return CREATE_INSTANCE_DUPLICATE;
    }

    resource.lc_tests.append(instance->clone());

    resource.new_instance = instance.key

    // Notify LC_InstCreation_Provider that new instance created.

    return CREATE_INSTANCE_OK;
}

Delete_Instance_Status LC_Test_Provider::delete_instance(
    const LC_Test* instance)
{
    for (size_t i = 0; i < resource.lc_tests.size(); i++)
    {
        LC_Test* e = resource.lc_tests[i];

        if (key_eq(instance, e))
        {
            resource.lc_tests.remove(i);
            LC_Test::destroy(e);
            return DELETE_INSTANCE_OK;
        }
    }

    return DELETE_INSTANCE_NOT_FOUND;
}

Modify_Instance_Status LC_Test_Provider::modify_instance(
    const LC_Test* model,
    const LC_Test* instance)
{

    for (size_t i = 0; i < resource.lc_tests.size(); i++)
    {

    for (size_t i = 0; i < resource.lc_tests.size(); i++)
    {
        Employee* e = resource.lc_tests[i];

        if (key_eq(instance, e))
        {
            copy(e, instance, model);
            return MODIFY_INSTANCE_OK;
        }
    }

    return MODIFY_INSTANCE_NOT_FOUND;* e = resource.employees[i];

        if (key_eq(instance, e))
        {
            copy(e, instance, model);
            return MODIFY_INSTANCE_OK;
        }
    }

    return MODIFY_INSTANCE_NOT_FOUND;}

/*@END@*/

CIMPLE_NAMESPACE_END
