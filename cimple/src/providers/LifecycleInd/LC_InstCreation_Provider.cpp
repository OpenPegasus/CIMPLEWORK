// Generated by genprov 2.0.25
#include "LC_InstCreation_Provider.h"
#include "Resource.h"

CIMPLE_NAMESPACE_BEGIN


// Alternative is to keep a thread for the LC_InstCreation. The thread would
// be locked an execute once each time the mutex was unlocked and then lock
// the mutex again
void* LC_InstCreation_Provider::_indication_thread(void* arg)
{
    printf("LC_InstCreation_Provider::_indication_thread()\n");

    OutOfOfficeNotice_Provider* provider = (OutOfOfficeNotice_Provider*)arg;

    while (provider->_continue.get())
    {
        // For a new LC_Test instance, send the indications

        resource.mutex.lock();

        /*
        for (size_t i = 0; i < resource.lc_tests.size(); i++)
        {
            const LC_InstCreation* e = resource.lc_tests[i];

            if (e->OutOfOffice.value)
            {
                LC_InstCreation* notice = LC_InstCreation::create(true);
                notice->employee = clone(e);
                provider->_indication_handler->handle(notice);
            }
        } */

        resource.mutex.unlock();

        // Sleep for one second
        Time::sleep(1 * Time::SEC);
    }

    return 0;
}

LC_InstCreation_Provider::LC_InstCreation_Provider() : _indication_handler(0)
{
}

LC_InstCreation_Provider::~LC_InstCreation_Provider()
{
}

Load_Status LC_InstCreation_Provider::load()
{
    return LOAD_OK;
}

Unload_Status LC_InstCreation_Provider::unload()
{
    return UNLOAD_OK;
}

Enable_Indications_Status LC_InstCreation_Provider::enable_indications(
    Indication_Handler<LC_InstCreation>* indication_handler)
{
    // Save indication handler.
    _indication_handler = indication_handler;

    // Create indication thread.
    _continue.inc();
    Thread::create_joinable(_thread, (Thread_Proc)_indication_thread, this);

    return ENABLE_INDICATIONS_OK;
}

Disable_Indications_Status LC_InstCreation_Provider::disable_indications()
{
    _continue.dec();
    void* value_ptr;
    Thread::join(_thread, value_ptr);

    delete _indication_handler;
    _indication_handler = 0;

    return DISABLE_INDICATIONS_OK;
}

/*@END@*/

CIMPLE_NAMESPACE_END
